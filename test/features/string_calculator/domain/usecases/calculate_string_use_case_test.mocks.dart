// Mocks generated by Mockito 5.4.6 from annotations
// in string_calculator/test/features/string_calculator/domain/usecases/calculate_string_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:string_calculator/features/string_calculator/domain/entities/calculation_result.dart'
    as _i3;
import 'package:string_calculator/features/string_calculator/domain/entities/parsed_input.dart'
    as _i2;
import 'package:string_calculator/features/string_calculator/domain/repositories/calculator_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeParsedInput_0 extends _i1.SmartFake implements _i2.ParsedInput {
  _FakeParsedInput_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCalculationResult_1 extends _i1.SmartFake
    implements _i3.CalculationResult {
  _FakeCalculationResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CalculatorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculatorRepository extends _i1.Mock
    implements _i4.CalculatorRepository {
  MockCalculatorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ParsedInput> parseInput(String? input) =>
      (super.noSuchMethod(
            Invocation.method(#parseInput, [input]),
            returnValue: _i5.Future<_i2.ParsedInput>.value(
              _FakeParsedInput_0(this, Invocation.method(#parseInput, [input])),
            ),
          )
          as _i5.Future<_i2.ParsedInput>);

  @override
  _i5.Future<_i3.CalculationResult> calculate(_i2.ParsedInput? parsedInput) =>
      (super.noSuchMethod(
            Invocation.method(#calculate, [parsedInput]),
            returnValue: _i5.Future<_i3.CalculationResult>.value(
              _FakeCalculationResult_1(
                this,
                Invocation.method(#calculate, [parsedInput]),
              ),
            ),
          )
          as _i5.Future<_i3.CalculationResult>);

  @override
  _i5.Future<_i3.CalculationResult> add(String? numbers) =>
      (super.noSuchMethod(
            Invocation.method(#add, [numbers]),
            returnValue: _i5.Future<_i3.CalculationResult>.value(
              _FakeCalculationResult_1(
                this,
                Invocation.method(#add, [numbers]),
              ),
            ),
          )
          as _i5.Future<_i3.CalculationResult>);

  @override
  bool validateInput(String? input) =>
      (super.noSuchMethod(
            Invocation.method(#validateInput, [input]),
            returnValue: false,
          )
          as bool);

  @override
  List<int> extractNumbers(_i2.ParsedInput? parsedInput) =>
      (super.noSuchMethod(
            Invocation.method(#extractNumbers, [parsedInput]),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  void validateNumbers(List<int>? numbers) => super.noSuchMethod(
    Invocation.method(#validateNumbers, [numbers]),
    returnValueForMissingStub: null,
  );
}
